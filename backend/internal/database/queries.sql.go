// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const alterAccount = `-- name: AlterAccount :exec
UPDATE accounts
SET
    email = ?,
    address = ?,
    user_phone_number = ?
WHERE
    username = ?
`

type AlterAccountParams struct {
	Email           string
	Address         string
	UserPhoneNumber int64
	Username        string
}

func (q *Queries) AlterAccount(ctx context.Context, arg AlterAccountParams) error {
	_, err := q.db.ExecContext(ctx, alterAccount,
		arg.Email,
		arg.Address,
		arg.UserPhoneNumber,
		arg.Username,
	)
	return err
}

const alterFood = `-- name: AlterFood :exec
UPDATE food
SET
    food_tag = ?,
    price = ?,
    info = ?,
    ingredients = ?,
    time_needed = ?
WHERE
    food_name = ?
`

type AlterFoodParams struct {
	FoodTag     string
	Price       float64
	Info        sql.NullString
	Ingredients string
	TimeNeeded  sql.NullString
	FoodName    string
}

func (q *Queries) AlterFood(ctx context.Context, arg AlterFoodParams) error {
	_, err := q.db.ExecContext(ctx, alterFood,
		arg.FoodTag,
		arg.Price,
		arg.Info,
		arg.Ingredients,
		arg.TimeNeeded,
		arg.FoodName,
	)
	return err
}

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts (username, password, email, address, user_phone_number)
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?
)
`

type CreateAccountParams struct {
	Username        string
	Password        string
	Email           string
	Address         string
	UserPhoneNumber int64
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.ExecContext(ctx, createAccount,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.Address,
		arg.UserPhoneNumber,
	)
	return err
}

const createFood = `-- name: CreateFood :exec
INSERT INTO food (food_name, food_tag, price, info, ingredients, time_needed)
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
`

type CreateFoodParams struct {
	FoodName    string
	FoodTag     string
	Price       float64
	Info        sql.NullString
	Ingredients string
	TimeNeeded  sql.NullString
}

func (q *Queries) CreateFood(ctx context.Context, arg CreateFoodParams) error {
	_, err := q.db.ExecContext(ctx, createFood,
		arg.FoodName,
		arg.FoodTag,
		arg.Price,
		arg.Info,
		arg.Ingredients,
		arg.TimeNeeded,
	)
	return err
}

const createOrder = `-- name: CreateOrder :exec
INSERT INTO orders (user_id, order_info, is_ranged)
VALUES (
    ?,
    ?,
    ?
)
`

type CreateOrderParams struct {
	UserID    int32
	OrderInfo string
	IsRanged  bool
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.ExecContext(ctx, createOrder, arg.UserID, arg.OrderInfo, arg.IsRanged)
	return err
}

const createOrderedItem = `-- name: CreateOrderedItem :exec
INSERT INTO items (order_id, food_id, quantity)
VALUES (
    ?,
    ?,
    ?
)
`

type CreateOrderedItemParams struct {
	OrderID  int32
	FoodID   int32
	Quantity int32
}

func (q *Queries) CreateOrderedItem(ctx context.Context, arg CreateOrderedItemParams) error {
	_, err := q.db.ExecContext(ctx, createOrderedItem, arg.OrderID, arg.FoodID, arg.Quantity)
	return err
}

const deleteFood = `-- name: DeleteFood :exec
DELETE FROM food
WHERE food_name = ?
`

func (q *Queries) DeleteFood(ctx context.Context, foodName string) error {
	_, err := q.db.ExecContext(ctx, deleteFood, foodName)
	return err
}

const deleteOrder = `-- name: DeleteOrder :exec
UPDATE orders
SET
    deleted = true
WHERE
    order_id = ?
`

func (q *Queries) DeleteOrder(ctx context.Context, orderID int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, orderID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, username, password, email, address, user_tag, user_phone_number FROM accounts WHERE username = ?
`

func (q *Queries) GetAccount(ctx context.Context, username string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Address,
		&i.UserTag,
		&i.UserPhoneNumber,
	)
	return i, err
}

const getAllFood = `-- name: GetAllFood :many
SELECT food_id, food_name, food_tag, price, info, ingredients, time_needed FROM food
`

func (q *Queries) GetAllFood(ctx context.Context) ([]Food, error) {
	rows, err := q.db.QueryContext(ctx, getAllFood)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Food
	for rows.Next() {
		var i Food
		if err := rows.Scan(
			&i.FoodID,
			&i.FoodName,
			&i.FoodTag,
			&i.Price,
			&i.Info,
			&i.Ingredients,
			&i.TimeNeeded,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFood = `-- name: GetFood :one
SELECT food_id, food_name, food_tag, price, info, ingredients, time_needed FROM food WHERE food_name = ?
`

func (q *Queries) GetFood(ctx context.Context, foodName string) (Food, error) {
	row := q.db.QueryRowContext(ctx, getFood, foodName)
	var i Food
	err := row.Scan(
		&i.FoodID,
		&i.FoodName,
		&i.FoodTag,
		&i.Price,
		&i.Info,
		&i.Ingredients,
		&i.TimeNeeded,
	)
	return i, err
}

const getOrder = `-- name: GetOrder :many
SELECT order_id, user_id, order_info, rating, feedback, order_time, is_done, is_ranged, deleted FROM orders WHERE user_id = ?
`

func (q *Queries) GetOrder(ctx context.Context, userID int32) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrder, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderID,
			&i.UserID,
			&i.OrderInfo,
			&i.Rating,
			&i.Feedback,
			&i.OrderTime,
			&i.IsDone,
			&i.IsRanged,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderedItems = `-- name: GetOrderedItems :many
SELECT item_id, order_id, food_id, quantity FROM items WHERE order_id = ?
`

func (q *Queries) GetOrderedItems(ctx context.Context, orderID int32) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getOrderedItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ItemID,
			&i.OrderID,
			&i.FoodID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rateOrder = `-- name: RateOrder :exec
UPDATE orders
SET
    rating = ?,
    feedback = ?,
    is_done = true
WHERE
    order_id = ?
`

type RateOrderParams struct {
	Rating   sql.NullInt32
	Feedback sql.NullString
	OrderID  int32
}

func (q *Queries) RateOrder(ctx context.Context, arg RateOrderParams) error {
	_, err := q.db.ExecContext(ctx, rateOrder, arg.Rating, arg.Feedback, arg.OrderID)
	return err
}
